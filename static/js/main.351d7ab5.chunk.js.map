{"version":3,"sources":["logo.svg","Api/ApiHandler.api.js","Api/Statistics.api.js","Containers/HomeContainer.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ApiHandler","axios","create","baseURL","headers","currentStatsApi","data","a","get","resp","console","log","response","HomeContainer","createContainer","useState","setData","getStats","Home","useContainer","useEffect","JSON","stringify","App","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,oKCO5BC,E,OALIC,EAAMC,OAAO,CAC/BC,QAAS,gCACTC,QAAS,CAAE,eAAgB,sBCFfC,EAAe,uCAAG,WAAMC,GAAN,eAAAC,EAAA,+EAEVP,EAAWQ,IAAI,2BAFL,cAEvBC,EAFuB,yBAGtBA,GAHsB,sCAK7BC,QAAQC,IAAR,MACM,KAAEC,SANqB,yDAAH,sDCgBbC,EAFOC,aAXN,WAAO,IAAD,EACGC,qBADH,mBACdT,EADc,KACRU,EADQ,KAGfC,EAAQ,uCAAG,4BAAAV,EAAA,sEACKF,IADL,OACZO,EADY,OAEhBI,EAAQJ,GAFQ,2CAAH,qDAKd,MAAO,CAAEN,OAAMU,UAASC,eCAVC,EAVF,WAAO,IAAD,EACSL,EAAcM,eAAjCb,EADU,EACVA,KAAMW,EADI,EACJA,SAMd,OAJAG,qBAAU,WACTH,MACE,IAEI,2BAAII,KAAKC,UAAUhB,GAAQ,MCKpBiB,MARf,WACC,OACC,kBAAC,EAAcC,SAAf,KACC,kBAAC,EAAD,QCEiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.351d7ab5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\n\nconst ApiHandler = axios.create({\n\tbaseURL: 'https://hpb.health.gov.lk/api',\n\theaders: { 'Content-Type': 'application/json' },\n});\n\nexport default ApiHandler;\n","import ApiHandler from './ApiHandler.api';\n\nexport const currentStatsApi = async data => {\n\ttry {\n\t\tconst resp = await ApiHandler.get('get-current-statistical');\n\t\treturn resp;\n\t} catch (e) {\n\t\tconsole.log(e);\n\t\tthrow e.response;\n\t}\n};\n","import { useState } from 'react';\nimport { createContainer } from 'unstated-next';\n\nimport { currentStatsApi } from '../Api/Statistics.api';\n\nconst useHome = () => {\n\tconst [data, setData] = useState();\n\n\tconst getStats = async () => {\n\t\tlet response = await currentStatsApi();\n\t\tsetData(response);\n\t};\n\n\treturn { data, setData, getStats };\n};\n\nconst HomeContainer = createContainer(useHome);\n\nexport default HomeContainer;\n","import React, { useEffect } from 'react';\nimport HomeContainer from '../Containers/HomeContainer';\n\nconst Home = () => {\n\tconst { data, getStats } = HomeContainer.useContainer();\n\n\tuseEffect(() => {\n\t\tgetStats();\n\t}, []);\n\n\treturn <p>{JSON.stringify(data || '')}</p>;\n};\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Home from './Components/Home';\nimport HomeContainer from './Containers/HomeContainer';\n\nfunction App() {\n\treturn (\n\t\t<HomeContainer.Provider>\n\t\t\t<Home />\n\t\t</HomeContainer.Provider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}